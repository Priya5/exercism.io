{
  "language": "ruby",
  "track_id": "<id>",
  "slug": "leap",
  "uuid": "<uuid>",
  "solution_uuid": "<uuid>",
  "user_id": "<id>",
  "username": "alice",
  "problem_files": {
    ".version": "2",
    "leap_test.rb": "#!/usr/bin/env ruby\ngem 'minitest', '>= 5.0.0'\nrequire 'minitest/autorun'\nrequire_relative 'leap'\n\n# Test data version:\n# 9b8b80c\nclass Date\n  def leap?\n    throw \"Implement this yourself instead of using Ruby's implementation.\"\n  end\n\n  alias gregorian_leap? leap?\n  alias julian_leap? leap?\nend\n\nclass YearTest < Minitest::Test\n  def test_leap_year\n    assert Year.leap?(1996), \"Expected 'true', 1996 is a leap year.\"\n  end\n\n  def test_standard_and_odd_year\n    skip\n    refute Year.leap?(1997), \"Expected 'false', 1997 is not a leap year.\"\n  end\n\n  def test_standard_even_year\n    skip\n    refute Year.leap?(1998), \"Expected 'false', 1998 is not a leap year.\"\n  end\n\n  def test_standard_nineteenth_century\n    skip\n    refute Year.leap?(1900), \"Expected 'false', 1900 is not a leap year.\"\n  end\n\n  def test_standard_eighteenth_century\n    skip\n    refute Year.leap?(1800), \"Expected 'false', 1800 is not a leap year.\"\n  end\n\n  def test_leap_twenty_fourth_century\n    skip\n    assert Year.leap?(2400), \"Expected 'true', 2400 is a leap year.\"\n  end\n\n  def test_leap_y2k\n    skip\n    assert Year.leap?(2000), \"Expected 'true', 2000 is a leap year.\"\n  end\n\n  # Problems in exercism evolve over time, as we find better ways to ask\n  # questions.\n  # The version number refers to the version of the problem you solved,\n  # not your solution.\n  #\n  # Define a constant named VERSION inside of the top level BookKeeping\n  # module, which may be placed near the end of your file.\n  #\n  # In your file, it will look like this:\n  #\n  # module BookKeeping\n  #   VERSION = 1 # Where the version number matches the one in the test.\n  # end\n  #\n  # If you are curious, read more about constants on RubyDoc:\n  # http://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/constants.html\n\n  def test_bookkeeping\n    skip\n    assert_equal 2, BookKeeping::VERSION\n  end\nend\n",
    "README.md": "# Leap\n\nWrite a program that will take a year and report if it is a leap year.\n\nThe tricky thing here is that a leap year in the Gregorian calendar occurs:\n\n```plain\non every year that is evenly divisible by 4\n  except every year that is evenly divisible by 100\n    unless the year is also evenly divisible by 400\n```\n\nFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\nyear, but 2000 is.\n\nIf your language provides a method in the standard library that does\nthis look-up, pretend it doesn't exist and implement it yourself.\n\n## Notes\n\nThough our exercise adopts some very simple rules, there is more to\nlearn!\n\nFor a delightful, four minute explanation of the whole leap year\nphenomenon, go watch [this youtube video][video].\n\n[video]: http://www.youtube.com/watch?v=xX96xng7sAE\n\n* * * *\n\nFor installation and learning resources, refer to the\n[exercism help page](http://exercism.io/languages/ruby).\n\nFor running the tests provided, you will need the Minitest gem. Open a\nterminal window and run the following command to install minitest:\n\n    gem install minitest\n\nIf you would like color output, you can `require 'minitest/pride'` in\nthe test file, or note the alternative instruction, below, for running\nthe test file.\n\nIn order to run the test, you can run the test file from the exercise\ndirectory. For example, if the test suite is called\n`hello_world_test.rb`, you can run the following command:\n\n    ruby hello_world_test.rb\n\nTo include color from the command line:\n\n    ruby -r minitest/pride hello_world_test.rb\n\nThe test files may have the execution bit set so you may also be able to\nrun it like this:\n\n    ./hello_world_test.rb\n\n## Source\n\nJavaRanch Cattle Drive, exercise 3 [http://www.javaranch.com/leap.jsp](http://www.javaranch.com/leap.jsp)\n\n## Submitting Incomplete Problems\nIt's possible to submit an incomplete solution so you can see how others have completed the exercise.\n\n"
  },
  "solution_files": {
    "leap.rb": "CODE"
  }
}
